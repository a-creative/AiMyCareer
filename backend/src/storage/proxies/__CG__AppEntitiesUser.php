<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);
        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

        return parent::__isset($name);
    }

    /**
     * {@inheritDoc}
     * @return array
     */
    public function __sleep()
    {
        $properties = array_merge(['__isInitialized__'], parent::__sleep());

        if ($this->__isInitialized__) {
            $properties = array_diff($properties, array_keys(self::$lazyPropertiesNames));
        }

        return $properties;
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getJWTIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJWTIdentifier', []);

        return parent::getJWTIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getJWTCustomClaims()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJWTCustomClaims', []);

        return parent::getJWTCustomClaims();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', []);

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName($firstName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', [$firstName]);

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName($lastName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', [$lastName]);

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobExperiences()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobExperiences', []);

        return parent::getJobExperiences();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobExperiences(\App\Entities\JobExperience $jobExperiences)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobExperiences', [$jobExperiences]);

        return parent::setJobExperiences($jobExperiences);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobPostings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobPostings', []);

        return parent::getJobPostings();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobPostings(\App\Entities\JobPosting $jobPostings)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobPostings', [$jobPostings]);

        return parent::setJobPostings($jobPostings);
    }

    /**
     * {@inheritDoc}
     */
    public function fill(array $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fill', [$attributes]);

        return parent::fill($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function forceFill(array $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'forceFill', [$attributes]);

        return parent::forceFill($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function qualifyColumn($column)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'qualifyColumn', [$column]);

        return parent::qualifyColumn($column);
    }

    /**
     * {@inheritDoc}
     */
    public function newInstance($attributes = array (
), $exists = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newInstance', [$attributes, $exists]);

        return parent::newInstance($attributes, $exists);
    }

    /**
     * {@inheritDoc}
     */
    public function newFromBuilder($attributes = array (
), $connection = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newFromBuilder', [$attributes, $connection]);

        return parent::newFromBuilder($attributes, $connection);
    }

    /**
     * {@inheritDoc}
     */
    public function load($relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'load', [$relations]);

        return parent::load($relations);
    }

    /**
     * {@inheritDoc}
     */
    public function loadMorph($relation, $relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadMorph', [$relation, $relations]);

        return parent::loadMorph($relation, $relations);
    }

    /**
     * {@inheritDoc}
     */
    public function loadMissing($relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadMissing', [$relations]);

        return parent::loadMissing($relations);
    }

    /**
     * {@inheritDoc}
     */
    public function loadCount($relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadCount', [$relations]);

        return parent::loadCount($relations);
    }

    /**
     * {@inheritDoc}
     */
    public function loadMorphCount($relation, $relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadMorphCount', [$relation, $relations]);

        return parent::loadMorphCount($relation, $relations);
    }

    /**
     * {@inheritDoc}
     */
    public function update(array $attributes = array (
), array $options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$attributes, $options]);

        return parent::update($attributes, $options);
    }

    /**
     * {@inheritDoc}
     */
    public function push()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'push', []);

        return parent::push();
    }

    /**
     * {@inheritDoc}
     */
    public function saveQuietly(array $options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'saveQuietly', [$options]);

        return parent::saveQuietly($options);
    }

    /**
     * {@inheritDoc}
     */
    public function save(array $options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', [$options]);

        return parent::save($options);
    }

    /**
     * {@inheritDoc}
     */
    public function saveOrFail(array $options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'saveOrFail', [$options]);

        return parent::saveOrFail($options);
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function forceDelete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'forceDelete', []);

        return parent::forceDelete();
    }

    /**
     * {@inheritDoc}
     */
    public function newQuery()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newQuery', []);

        return parent::newQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function newModelQuery()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newModelQuery', []);

        return parent::newModelQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function newQueryWithoutRelationships()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newQueryWithoutRelationships', []);

        return parent::newQueryWithoutRelationships();
    }

    /**
     * {@inheritDoc}
     */
    public function registerGlobalScopes($builder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'registerGlobalScopes', [$builder]);

        return parent::registerGlobalScopes($builder);
    }

    /**
     * {@inheritDoc}
     */
    public function newQueryWithoutScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newQueryWithoutScopes', []);

        return parent::newQueryWithoutScopes();
    }

    /**
     * {@inheritDoc}
     */
    public function newQueryWithoutScope($scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newQueryWithoutScope', [$scope]);

        return parent::newQueryWithoutScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function newQueryForRestoration($ids)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newQueryForRestoration', [$ids]);

        return parent::newQueryForRestoration($ids);
    }

    /**
     * {@inheritDoc}
     */
    public function newEloquentBuilder($query)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newEloquentBuilder', [$query]);

        return parent::newEloquentBuilder($query);
    }

    /**
     * {@inheritDoc}
     */
    public function newCollection(array $models = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newCollection', [$models]);

        return parent::newCollection($models);
    }

    /**
     * {@inheritDoc}
     */
    public function newPivot(\Illuminate\Database\Eloquent\Model $parent, array $attributes, $table, $exists, $using = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'newPivot', [$parent, $attributes, $table, $exists, $using]);

        return parent::newPivot($parent, $attributes, $table, $exists, $using);
    }

    /**
     * {@inheritDoc}
     */
    public function hasNamedScope($scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasNamedScope', [$scope]);

        return parent::hasNamedScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function callNamedScope($scope, array $parameters = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'callNamedScope', [$scope, $parameters]);

        return parent::callNamedScope($scope, $parameters);
    }

    /**
     * {@inheritDoc}
     */
    public function toJson($options = 0)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toJson', [$options]);

        return parent::toJson($options);
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function fresh($with = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fresh', [$with]);

        return parent::fresh($with);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refresh', []);

        return parent::refresh();
    }

    /**
     * {@inheritDoc}
     */
    public function replicate(array $except = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'replicate', [$except]);

        return parent::replicate($except);
    }

    /**
     * {@inheritDoc}
     */
    public function is($model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'is', [$model]);

        return parent::is($model);
    }

    /**
     * {@inheritDoc}
     */
    public function isNot($model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNot', [$model]);

        return parent::isNot($model);
    }

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnection', []);

        return parent::getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getConnectionName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnectionName', []);

        return parent::getConnectionName();
    }

    /**
     * {@inheritDoc}
     */
    public function setConnection($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConnection', [$name]);

        return parent::setConnection($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getTable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTable', []);

        return parent::getTable();
    }

    /**
     * {@inheritDoc}
     */
    public function setTable($table)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTable', [$table]);

        return parent::setTable($table);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeyName', []);

        return parent::getKeyName();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeyName($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeyName', [$key]);

        return parent::setKeyName($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getQualifiedKeyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQualifiedKeyName', []);

        return parent::getQualifiedKeyName();
    }

    /**
     * {@inheritDoc}
     */
    public function getKeyType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeyType', []);

        return parent::getKeyType();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeyType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeyType', [$type]);

        return parent::setKeyType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getIncrementing()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIncrementing', []);

        return parent::getIncrementing();
    }

    /**
     * {@inheritDoc}
     */
    public function setIncrementing($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIncrementing', [$value]);

        return parent::setIncrementing($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', []);

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function getQueueableId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueueableId', []);

        return parent::getQueueableId();
    }

    /**
     * {@inheritDoc}
     */
    public function getQueueableRelations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueueableRelations', []);

        return parent::getQueueableRelations();
    }

    /**
     * {@inheritDoc}
     */
    public function getQueueableConnection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueueableConnection', []);

        return parent::getQueueableConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getRouteKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRouteKey', []);

        return parent::getRouteKey();
    }

    /**
     * {@inheritDoc}
     */
    public function getRouteKeyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRouteKeyName', []);

        return parent::getRouteKeyName();
    }

    /**
     * {@inheritDoc}
     */
    public function resolveRouteBinding($value, $field = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resolveRouteBinding', [$value, $field]);

        return parent::resolveRouteBinding($value, $field);
    }

    /**
     * {@inheritDoc}
     */
    public function resolveChildRouteBinding($childType, $value, $field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resolveChildRouteBinding', [$childType, $value, $field]);

        return parent::resolveChildRouteBinding($childType, $value, $field);
    }

    /**
     * {@inheritDoc}
     */
    public function getForeignKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForeignKey', []);

        return parent::getForeignKey();
    }

    /**
     * {@inheritDoc}
     */
    public function getPerPage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerPage', []);

        return parent::getPerPage();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerPage($perPage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerPage', [$perPage]);

        return parent::setPerPage($perPage);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $value]);

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', [$key]);

        return parent::__unset($key);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $parameters)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$method, $parameters]);

        return parent::__call($method, $parameters);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function attributesToArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attributesToArray', []);

        return parent::attributesToArray();
    }

    /**
     * {@inheritDoc}
     */
    public function relationsToArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'relationsToArray', []);

        return parent::relationsToArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute', [$key]);

        return parent::getAttribute($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeValue($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeValue', [$key]);

        return parent::getAttributeValue($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getRelationValue($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelationValue', [$key]);

        return parent::getRelationValue($key);
    }

    /**
     * {@inheritDoc}
     */
    public function hasGetMutator($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasGetMutator', [$key]);

        return parent::hasGetMutator($key);
    }

    /**
     * {@inheritDoc}
     */
    public function mergeCasts($casts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'mergeCasts', [$casts]);

        return parent::mergeCasts($casts);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute($key, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', [$key, $value]);

        return parent::setAttribute($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function hasSetMutator($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSetMutator', [$key]);

        return parent::hasSetMutator($key);
    }

    /**
     * {@inheritDoc}
     */
    public function fillJsonAttribute($key, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fillJsonAttribute', [$key, $value]);

        return parent::fillJsonAttribute($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function fromJson($value, $asObject = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromJson', [$value, $asObject]);

        return parent::fromJson($value, $asObject);
    }

    /**
     * {@inheritDoc}
     */
    public function fromFloat($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromFloat', [$value]);

        return parent::fromFloat($value);
    }

    /**
     * {@inheritDoc}
     */
    public function fromDateTime($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromDateTime', [$value]);

        return parent::fromDateTime($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getDates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDates', []);

        return parent::getDates();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFormat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFormat', []);

        return parent::getDateFormat();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFormat($format)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFormat', [$format]);

        return parent::setDateFormat($format);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCast($key, $types = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCast', [$key, $types]);

        return parent::hasCast($key, $types);
    }

    /**
     * {@inheritDoc}
     */
    public function getCasts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCasts', []);

        return parent::getCasts();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function setRawAttributes(array $attributes, $sync = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRawAttributes', [$attributes, $sync]);

        return parent::setRawAttributes($attributes, $sync);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginal($key = NULL, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginal', [$key, $default]);

        return parent::getOriginal($key, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function getRawOriginal($key = NULL, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRawOriginal', [$key, $default]);

        return parent::getRawOriginal($key, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function only($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'only', [$attributes]);

        return parent::only($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function syncOriginal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'syncOriginal', []);

        return parent::syncOriginal();
    }

    /**
     * {@inheritDoc}
     */
    public function syncOriginalAttribute($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'syncOriginalAttribute', [$attribute]);

        return parent::syncOriginalAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function syncOriginalAttributes($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'syncOriginalAttributes', [$attributes]);

        return parent::syncOriginalAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function syncChanges()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'syncChanges', []);

        return parent::syncChanges();
    }

    /**
     * {@inheritDoc}
     */
    public function isDirty($attributes = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDirty', [$attributes]);

        return parent::isDirty($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function isClean($attributes = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isClean', [$attributes]);

        return parent::isClean($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function wasChanged($attributes = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'wasChanged', [$attributes]);

        return parent::wasChanged($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getDirty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirty', []);

        return parent::getDirty();
    }

    /**
     * {@inheritDoc}
     */
    public function getChanges()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChanges', []);

        return parent::getChanges();
    }

    /**
     * {@inheritDoc}
     */
    public function originalIsEquivalent($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'originalIsEquivalent', [$key]);

        return parent::originalIsEquivalent($key);
    }

    /**
     * {@inheritDoc}
     */
    public function append($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'append', [$attributes]);

        return parent::append($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setAppends(array $appends)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAppends', [$appends]);

        return parent::setAppends($appends);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAppended($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAppended', [$attribute]);

        return parent::hasAppended($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getMutatedAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMutatedAttributes', []);

        return parent::getMutatedAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getObservableEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObservableEvents', []);

        return parent::getObservableEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function setObservableEvents(array $observables)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObservableEvents', [$observables]);

        return parent::setObservableEvents($observables);
    }

    /**
     * {@inheritDoc}
     */
    public function addObservableEvents($observables)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addObservableEvents', [$observables]);

        return parent::addObservableEvents($observables);
    }

    /**
     * {@inheritDoc}
     */
    public function removeObservableEvents($observables)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeObservableEvents', [$observables]);

        return parent::removeObservableEvents($observables);
    }

    /**
     * {@inheritDoc}
     */
    public function getGlobalScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGlobalScopes', []);

        return parent::getGlobalScopes();
    }

    /**
     * {@inheritDoc}
     */
    public function hasOne($related, $foreignKey = NULL, $localKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOne', [$related, $foreignKey, $localKey]);

        return parent::hasOne($related, $foreignKey, $localKey);
    }

    /**
     * {@inheritDoc}
     */
    public function hasOneThrough($related, $through, $firstKey = NULL, $secondKey = NULL, $localKey = NULL, $secondLocalKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOneThrough', [$related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey]);

        return parent::hasOneThrough($related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey);
    }

    /**
     * {@inheritDoc}
     */
    public function morphOne($related, $name, $type = NULL, $id = NULL, $localKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'morphOne', [$related, $name, $type, $id, $localKey]);

        return parent::morphOne($related, $name, $type, $id, $localKey);
    }

    /**
     * {@inheritDoc}
     */
    public function belongsTo($related, $foreignKey = NULL, $ownerKey = NULL, $relation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'belongsTo', [$related, $foreignKey, $ownerKey, $relation]);

        return parent::belongsTo($related, $foreignKey, $ownerKey, $relation);
    }

    /**
     * {@inheritDoc}
     */
    public function morphTo($name = NULL, $type = NULL, $id = NULL, $ownerKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'morphTo', [$name, $type, $id, $ownerKey]);

        return parent::morphTo($name, $type, $id, $ownerKey);
    }

    /**
     * {@inheritDoc}
     */
    public function hasMany($related, $foreignKey = NULL, $localKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasMany', [$related, $foreignKey, $localKey]);

        return parent::hasMany($related, $foreignKey, $localKey);
    }

    /**
     * {@inheritDoc}
     */
    public function hasManyThrough($related, $through, $firstKey = NULL, $secondKey = NULL, $localKey = NULL, $secondLocalKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasManyThrough', [$related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey]);

        return parent::hasManyThrough($related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey);
    }

    /**
     * {@inheritDoc}
     */
    public function morphMany($related, $name, $type = NULL, $id = NULL, $localKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'morphMany', [$related, $name, $type, $id, $localKey]);

        return parent::morphMany($related, $name, $type, $id, $localKey);
    }

    /**
     * {@inheritDoc}
     */
    public function belongsToMany($related, $table = NULL, $foreignPivotKey = NULL, $relatedPivotKey = NULL, $parentKey = NULL, $relatedKey = NULL, $relation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'belongsToMany', [$related, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $relation]);

        return parent::belongsToMany($related, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $relation);
    }

    /**
     * {@inheritDoc}
     */
    public function morphToMany($related, $name, $table = NULL, $foreignPivotKey = NULL, $relatedPivotKey = NULL, $parentKey = NULL, $relatedKey = NULL, $inverse = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'morphToMany', [$related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $inverse]);

        return parent::morphToMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $inverse);
    }

    /**
     * {@inheritDoc}
     */
    public function morphedByMany($related, $name, $table = NULL, $foreignPivotKey = NULL, $relatedPivotKey = NULL, $parentKey = NULL, $relatedKey = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'morphedByMany', [$related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey]);

        return parent::morphedByMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey);
    }

    /**
     * {@inheritDoc}
     */
    public function joiningTable($related, $instance = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'joiningTable', [$related, $instance]);

        return parent::joiningTable($related, $instance);
    }

    /**
     * {@inheritDoc}
     */
    public function joiningTableSegment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'joiningTableSegment', []);

        return parent::joiningTableSegment();
    }

    /**
     * {@inheritDoc}
     */
    public function touches($relation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'touches', [$relation]);

        return parent::touches($relation);
    }

    /**
     * {@inheritDoc}
     */
    public function touchOwners()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'touchOwners', []);

        return parent::touchOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function getMorphClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMorphClass', []);

        return parent::getMorphClass();
    }

    /**
     * {@inheritDoc}
     */
    public function getRelations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelations', []);

        return parent::getRelations();
    }

    /**
     * {@inheritDoc}
     */
    public function getRelation($relation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelation', [$relation]);

        return parent::getRelation($relation);
    }

    /**
     * {@inheritDoc}
     */
    public function relationLoaded($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'relationLoaded', [$key]);

        return parent::relationLoaded($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setRelation($relation, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelation', [$relation, $value]);

        return parent::setRelation($relation, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function unsetRelation($relation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetRelation', [$relation]);

        return parent::unsetRelation($relation);
    }

    /**
     * {@inheritDoc}
     */
    public function setRelations(array $relations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelations', [$relations]);

        return parent::setRelations($relations);
    }

    /**
     * {@inheritDoc}
     */
    public function withoutRelations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'withoutRelations', []);

        return parent::withoutRelations();
    }

    /**
     * {@inheritDoc}
     */
    public function unsetRelations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetRelations', []);

        return parent::unsetRelations();
    }

    /**
     * {@inheritDoc}
     */
    public function getTouchedRelations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTouchedRelations', []);

        return parent::getTouchedRelations();
    }

    /**
     * {@inheritDoc}
     */
    public function setTouchedRelations(array $touches)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTouchedRelations', [$touches]);

        return parent::setTouchedRelations($touches);
    }

    /**
     * {@inheritDoc}
     */
    public function touch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'touch', []);

        return parent::touch();
    }

    /**
     * {@inheritDoc}
     */
    public function updateTimestamps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTimestamps', []);

        return parent::updateTimestamps();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$value]);

        return parent::setCreatedAt($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$value]);

        return parent::setUpdatedAt($value);
    }

    /**
     * {@inheritDoc}
     */
    public function freshTimestamp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'freshTimestamp', []);

        return parent::freshTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    public function freshTimestampString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'freshTimestampString', []);

        return parent::freshTimestampString();
    }

    /**
     * {@inheritDoc}
     */
    public function usesTimestamps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'usesTimestamps', []);

        return parent::usesTimestamps();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAtColumn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAtColumn', []);

        return parent::getCreatedAtColumn();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAtColumn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAtColumn', []);

        return parent::getUpdatedAtColumn();
    }

    /**
     * {@inheritDoc}
     */
    public function getQualifiedCreatedAtColumn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQualifiedCreatedAtColumn', []);

        return parent::getQualifiedCreatedAtColumn();
    }

    /**
     * {@inheritDoc}
     */
    public function getQualifiedUpdatedAtColumn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQualifiedUpdatedAtColumn', []);

        return parent::getQualifiedUpdatedAtColumn();
    }

    /**
     * {@inheritDoc}
     */
    public function getHidden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHidden', []);

        return parent::getHidden();
    }

    /**
     * {@inheritDoc}
     */
    public function setHidden(array $hidden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHidden', [$hidden]);

        return parent::setHidden($hidden);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible(array $visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function makeVisible($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeVisible', [$attributes]);

        return parent::makeVisible($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function makeVisibleIf($condition, $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeVisibleIf', [$condition, $attributes]);

        return parent::makeVisibleIf($condition, $attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function makeHidden($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeHidden', [$attributes]);

        return parent::makeHidden($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function makeHiddenIf($condition, $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeHiddenIf', [$condition, $attributes]);

        return parent::makeHiddenIf($condition, $attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getFillable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFillable', []);

        return parent::getFillable();
    }

    /**
     * {@inheritDoc}
     */
    public function fillable(array $fillable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fillable', [$fillable]);

        return parent::fillable($fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function mergeFillable(array $fillable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'mergeFillable', [$fillable]);

        return parent::mergeFillable($fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function getGuarded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGuarded', []);

        return parent::getGuarded();
    }

    /**
     * {@inheritDoc}
     */
    public function guard(array $guarded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'guard', [$guarded]);

        return parent::guard($guarded);
    }

    /**
     * {@inheritDoc}
     */
    public function mergeGuarded(array $guarded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'mergeGuarded', [$guarded]);

        return parent::mergeGuarded($guarded);
    }

    /**
     * {@inheritDoc}
     */
    public function isFillable($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFillable', [$key]);

        return parent::isFillable($key);
    }

    /**
     * {@inheritDoc}
     */
    public function isGuarded($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isGuarded', [$key]);

        return parent::isGuarded($key);
    }

    /**
     * {@inheritDoc}
     */
    public function totallyGuarded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'totallyGuarded', []);

        return parent::totallyGuarded();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifierName', []);

        return parent::getAuthIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifier', []);

        return parent::getAuthIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthPassword', []);

        return parent::getAuthPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberToken', []);

        return parent::getRememberToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setRememberToken($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRememberToken', [$value]);

        return parent::setRememberToken($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberTokenName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberTokenName', []);

        return parent::getRememberTokenName();
    }

    /**
     * {@inheritDoc}
     */
    public function can($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'can', [$abilities, $arguments]);

        return parent::can($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cant($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cant', [$abilities, $arguments]);

        return parent::cant($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cannot($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cannot', [$abilities, $arguments]);

        return parent::cannot($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForPasswordReset', []);

        return parent::getEmailForPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function sendPasswordResetNotification($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendPasswordResetNotification', [$token]);

        return parent::sendPasswordResetNotification($token);
    }

    /**
     * {@inheritDoc}
     */
    public function hasVerifiedEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasVerifiedEmail', []);

        return parent::hasVerifiedEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function markEmailAsVerified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markEmailAsVerified', []);

        return parent::markEmailAsVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function sendEmailVerificationNotification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendEmailVerificationNotification', []);

        return parent::sendEmailVerificationNotification();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForVerification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForVerification', []);

        return parent::getEmailForVerification();
    }

}
